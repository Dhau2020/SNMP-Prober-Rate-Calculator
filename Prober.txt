#!/usr/bin/python3

import easysnmp
from easysnmp import Session
import sys
import time
import math


agent_info = sys.argv[1].split(':')
agent_ip = agent_info[0]
agent_port = agent_info[1]
agent_community = agent_info[2]
frequency = float(sys.argv[2])
sample_count = int(sys.argv[3])
sample_interval = 1 / frequency
oids = []

for index in range(4, len(sys.argv)):
    oids.append(sys.argv[index])

oids.insert(0, '1.3.6.1.2.1.1.3.0')

previous_oids = []
current_oids = []
previous_time = 0
last_update = ""

def process_counter(output, index):
    global previous_oids, previous_time, last_update, current_oids

    if output[index].value not in ['NOSUCHOBJECT', 'NOSUCHINSTANCE']:
        current_oids.append(int(output[index].value))
        if iteration != 0 and len(previous_oids) > 0:
            delta_value = int(current_oids[index - 1]) - int(previous_oids[index - 1])
            elapsed_time = (uptime) - (previous_time)
            rate = int(delta_value / elapsed_time)

            if rate < 0:
                if output[index].snmp_type == 'COUNTER32':
                    delta_value += 2**32
                elif output[index].snmp_type == 'COUNTER64':
                    delta_value += 2**64

            try:
                if last_update == str(current_time):
                    print(f"{round(delta_value / elapsed_time)}", end="|")
                else:
                    print(f"{current_time}|{round(delta_value / elapsed_time)}", end="|")
                last_update = str(current_time)
            except:
                print(f"{current_time}|{round(delta_value / elapsed_time)}", end="|")
                last_update = str(current_time)

def process_gauge(output, index):
    global previous_oids, previous_time, last_update, current_oids

    if output[index].value not in ['NOSUCHOBJECT', 'NOSUCHINSTANCE']:
        current_oids.append(int(output[index].value))
        if iteration != 0 and len(previous_oids) > 0:
            delta_value = (current_oids[index - 1]) - (previous_oids[index - 1])
            delta_value = f"+{delta_value}" if delta_value > 0 else delta_value
            try:
                if last_update == str(current_time):
                    print(f"{current_oids[-1]}({delta_value})", end="|")
                else:
                    print(f"{current_time}|{current_oids[-1]}({delta_value})", end="|")
                last_update = str(current_time)
            except:
                print(f"\n{current_time}|{current_oids[-1]}({delta_value})", end="|")
                last_update = str(current_time)

def process_timeticks(output, index):
    global previous_oids, previous_time, last_update, current_oids, past_elapsed_time, past_delta_value

    if output[index].value not in ['NOSUCHOBJECT', 'NOSUCHINSTANCE']:
        current_oids.append(int(output[index].value))
        if iteration != 0 and len(previous_oids) > 0:
            delta_value = int(current_oids[index - 1]) - int(previous_oids[index - 1])
            elapsed_time = (current_time) - (previous_time)
            rate = int(delta_value / elapsed_time)
            #print(current_oids[index - 1],previous_oids[index - 1])
            #print("curr",current_time,"prev",previous_time)
            #print("del",delta_value,"elap",elapsed_time)
            if elapsed_time > 0:
                past_elapsed_time = elapsed_time
            if delta_value > 0:
                past_delta_value = delta_value

            if delta_value < 0 or elapsed_time < 0:
                previous_oids[index - 1] = 0
                delta_value = current_oids[index - 1] - previous_oids[index - 1]
                elapsed_time += previous_time
                print("Agent has RESET")

            try:
                if last_update == str(current_time):
                    print(f"{rate}", end="|")
                else:
                    print(f"{current_time}|{rate}", end="|")
                last_update = str(current_time)
            except:
                print(f"{current_time}|{rate}", end="|")
                last_update = str(current_time)

def process_octetstring(output, index):
    global previous_oids, previous_time, last_update, current_oids

    if output[index].value not in ['NOSUCHOBJECT', 'NOSUCHINSTANCE']:
        current_oids.append(output[index].value)
        if iteration != 0 and len(previous_oids) > 0:
            try:
                if last_update == str(current_time):
                    print(f"{current_oids[-1]}", end="|")
                else:
                    print(f"{current_time}|{current_oids[-1]}", end="|")
                last_update = str(current_time)
            except:
                print(f"\n{current_time}|{current_oids[-1]}", end="|")
                last_update = str(current_time)

if sample_count == -1:
    session = Session(hostname=agent_ip, remote_port=agent_port, community=agent_community, version=2, timeout=0.1, retries=10)
    iteration = 0
    previous_oids = []

    while True:
        current_time_run=float(time.time())
        output = session.get(oids)
        uptime = float(output[0].value) / 100
        current_oids = []
        index = 1
        current_time = uptime

        while index < len(output):
            snmp_type = output[index].snmp_type
            #print(snmp_type)
            if snmp_type in ['COUNTER', 'COUNTER64', 'COUNTER32']:
                process_counter(output, index)
            elif snmp_type == 'GAUGE':
                process_gauge(output, index)
            elif snmp_type == 'TICKS' or snmp_type == 'TIMETICKS':
                process_timeticks(output, index)
                
            elif snmp_type == 'OCTETSTR':
                process_octetstring(output, index)

            index += 1

        previous_oids = current_oids
        previous_time = current_time
        if iteration != 0:
            print(end="\n")
        elapsed_time = float(time.time()) - current_time_run
        iteration += 1
        if elapsed_time > sample_interval:
            delay = math.ceil(elapsed_time / sample_interval)
            target_time = current_time_run + (delay * sample_interval)
            while time.time() < target_time:
                pass
        else:
            target_time = current_time_run + sample_interval
            while time.time() < target_time:
                pass
else:
    session = Session(hostname=agent_ip, remote_port=agent_port, community=agent_community, version=2, timeout=0.1, retries=10)
    previous_oids = []

    for iteration in range(sample_count + 1):
        current_time_run = float(time.time())
        output = session.get(oids)
        uptime = int(output[0].value) / 100
        current_oids = []
        index = 1
        current_time=uptime

        while index < len(output):
            snmp_type = output[index].snmp_type
            if snmp_type in ['COUNTER', 'COUNTER64', 'COUNTER32']:
                process_counter(output, index)
            elif snmp_type == 'GAUGE':
                process_gauge(output, index)
            elif snmp_type == 'TIMETICKS' or snmp_type == 'TICKS':
                process_timeticks(output, index)
            elif snmp_type == 'OCTETSTR':
                process_octetstring(output, index)

            index += 1

        previous_oids = current_oids
        previous_time = uptime
        if iteration != 0:
            print(end="\n")
        elapsed_time = float(time.time()) - current_time_run
        if elapsed_time > sample_interval:
            delay = math.ceil(elapsed_time / sample_interval)
            target_time = current_time_run + (delay * sample_interval)
            while time.time() < target_time:
                pass
        else:
            target_time = current_time_run + sample_interval
            while time.time() < target_time:
                pass
